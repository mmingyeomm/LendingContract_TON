#include "../../imports/stdlib.fc";
#include "../logic/calculate_supply.fc";

;; Load the storage
(cell) load_storage() inline {
    slice ds = get_data().begin_parse();

    if (ds.slice_empty?()) {
        return new_dict();
    }
    return ds~load_dict();
}

() save_storage(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) {
    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4);
    slice sender_address = cs~load_msg_addr();
    
    cell dict = load_storage();
    
    ;; 주소 처리
    int wc = sender_address~load_int(8);
    int hash = sender_address~load_uint(256);
    
    (slice value, int success) = dict.udict_get?(256, hash);
    int current_supply = 0;
    if (success) {
        slice stored_data = value;
        int stored_wc = stored_data~load_int(8);
        if (stored_wc == wc) {  ;; workchain이 일치할 경우에만 현재 supply 로드
            current_supply = stored_data~load_coins();
        }
    }
    
    int new_supply = current_supply + msg_value;
    
    ;; value에 workchain 정보와 supply 함께 저장
    dict~udict_set(
        256,
        hash,
        begin_cell()
            .store_int(wc, 8)    ;; workchain 정보 저장
            .store_coins(new_supply)
        .end_cell().begin_parse()
    );
    
    set_data(
        begin_cell()
            .store_dict(dict)
            .store_int()
        .end_cell()
    );
}

(int) get_user_supply(slice user_address) inline {
    cell dict = load_storage();
    
    int wc = user_address~load_int(8);
    int hash = user_address~load_uint(256);
    
    (slice value, int success) = dict.udict_get?(256, hash);
    if (success == 0) {
        return 0;
    }
    
    ;; workchain 검증
    slice stored_data = value;
    int stored_wc = stored_data~load_int(8);
    if (stored_wc != wc) {
        return 0;
    }
    
    return stored_data~load_coins();
}

(cell) get_user_storage() inline {
    cell dict = load_storage();
    return dict;
}

(int) get_ltv() inline {
    return return_ltv();
}
